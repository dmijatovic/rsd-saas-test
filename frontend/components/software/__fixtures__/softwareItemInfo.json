 {
    "id": "2ab39fd8-2918-4527-9209-b68624dd7d1e",
    "slug": "xenon",
    "brand_name": "Xenon",
    "bullets": "* Provides an easy-to-use interface for distributed computing developers \n* Enables the use of different file transfer protocols and scheduling systems on remote machines \n* No need to learn and implement many different APIs\n* Successfully used in many eScience tools and projects",
    "concept_doi": "10.5281/zenodo.597993",
    "get_started_url": "https://github.com/xenon-middleware/xenon",
    "is_featured": true,
    "is_published": true,
    "read_more": "Many applications use remote storage and compute resources. To do so, they need\nto include code to interact with the scheduling systems and file transfer\nprotocols used on those remote machines.\n\nUnfortunately, many different scheduler systems and file transfer protocols\nexist, often with completely different programming interfaces. This makes it\ndifficult for applications to switch to a different system or support multiple\nremote systems simultaneously.\n\nXenon solves this problem by providing a single programming interface to many\ndifferent types of remote resources. As a result, changing from one scheduler to\nanother, or from one file transfer protocol to another, becomes a matter of\nchanging just a few lines of code. This is obviously much cheaper in time and\nmoney than developing, debugging, and maintaining new code that implements the\nsame logic you had before, but for a different scheduler or a different file\ntransfer protocol.\n",
    "short_statement": "If you are using remote machines to do your computations, and donâ€™t feel like learning and implementing many different APIs, Xenon is the tool for you.",
    "created_at": "2022-01-04T08:19:38.687404",
    "updated_at": "2022-01-04T08:19:38.687404"
}
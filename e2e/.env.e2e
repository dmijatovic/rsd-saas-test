# e2e env file, for end-to-end tests
# fake secrets used just to make rsd work in the github action
# DO NOT USE REAL SECRETS IN THIS FILE!
# THIS FILE IS COMMITED TO REPO!

# .env.e2e is consumed by docker-compose.yml in the github action

# ---- DOCKER PROJECT SETTINGS ----------

# Define this variable, if you are running different versions of the RSD, in
# order to define the docker project name. If you leave this empty, docker will
# automatically name the containers.
COMPOSE_PROJECT_NAME="e2e-rsd"

# ---- PUBLIC ENV VARIABLES -------------

# postgresql
# consumed by services: backend
POSTGRES_DB_HOST=database
# consumed by services: backend
POSTGRES_DB_HOST_PORT=5432
# consumed by services: database, backend
POSTGRES_DB=rsd-db
# consumed by services: database
POSTGRES_USER=rsd

# backend (postgREST)
# consumed by services: backend
PGRST_DB_ANON_ROLE=rsd_web_anon
PGRST_DB_SCHEMA=public
PGRST_SERVER_PORT=3500

# postgREST API
# consumed by services: authentication,frontend,auth-tests, scrapers
# .env.local: http://localhost/api/v1, .env: http://backend:3500
POSTGREST_URL=http://backend:3500

# postgREST API reachable outside of Docker
# consumed by services: swagger
POSTGREST_URL_EXTERNAL=http://localhost/api/v1

# RSD Auth module
# consumed by services: frontend (api/fe)
# .env.local: http://localhost/auth, .env: http://auth:7000
RSD_AUTH_URL=http://auth:7000

# RSD Reverse Proxy URL
# consumed by services: frontend
# .env.local: http://localhost, .env: http://nginx
RSD_REVERSE_PROXY_URL=http://nginx

# consumed by services: authentication
# If set to "dev", the first user to log in will become admin.
# Any other value doesn't activate this feature (and doesn't do anything).
RSD_ENVIRONMENT=production

# consumed by services: authentication, frontend (api/fe)
# provide a list of supported OpenID auth providers
# the entries should be separated by semicolon (;)
# Each value should consist of a key and a value (values are CASE SENSITIVE), separated by a colon (:)
# Allowed keys are: SURFCONEXT, HELMHOLTZ, ORCID, AZURE, LINKEDIN or LOCAL
# Allowed values are DISABLED, INVITE_ONLY, or EVERYONE
# If a value is something else, it is considered to be misconfigured and will be disabled
# If one of the allowed keys is missing, DISABLED is used
# if you add the entry "LOCAL:EVERYONE" or "LOCAL:INVITE_ONLY", then local accounts are enabled, USE THIS FOR TESTING/DEVELOPMENT PURPOSES ONLY
# NOTE! in e2e ONLY LOCAL provider works because it does not requires secrets/tokens
# in e2e we use LOCAL but we list other 2 providers to test selection modal which otherwise will not be shown.
RSD_AUTH_PROVIDERS=SURFCONEXT:EVERYONE;ORCID:INVITE_ONLY;LOCAL:EVERYONE

# consumed by services: authentication, frontend (api/fe)
# provide a list of supported OpenID auth providers for coupling with the user's RSD account
# the values should be separated by semicolon (;)
# Allowed values are: ORCID, LINKEDIN
RSD_AUTH_COUPLE_PROVIDERS=ORCID

# SURFCONEXT - TEST ENVIRONMENT
# consumed by: authentication, frontend/utils/loginHelpers
SURFCONEXT_CLIENT_ID=www.research-software.nl
# consumed by: authentication, frontend/utils/loginHelpers
SURFCONEXT_REDIRECT=http://localhost/auth/login/surfconext
# consumed by: authentication, frontend/utils/loginHelpers
SURFCONEXT_WELL_KNOWN_URL=https://connect.test.surfconext.nl/.well-known/openid-configuration
# consumed by: authentication, frontend/utils/loginHelpers
SURFCONEXT_SCOPES=openid
# consumed by: frontend/utils/loginHelpers
SURFCONEXT_RESPONSE_MODE=form_post

# ORCID
# consumed by: authentication, frontend/utils/loginHelpers
ORCID_CLIENT_ID=APP-4D4D69ASWTYOI9QI
# consumed by: authentication, frontend/utils/loginHelpers
ORCID_REDIRECT=http://localhost/auth/login/orcid
# consumed by: authentication, frontend/utils/loginHelpers
ORCID_WELL_KNOWN_URL=https://sandbox.orcid.org/.well-known/openid-configuration
# consumed by: authentication, frontend/utils/loginHelpers
ORCID_SCOPES=openid
# consumed by: frontend/utils/loginHelpers
ORCID_RESPONSE_MODE=query

# max requests to the GitHub API per run, runs 10 times per hour
# optional, comment out if not available, a default of 6 will be used
# consumed by: scrapers
MAX_REQUESTS_GITHUB=3

# max request to GitLab API per run, runs 10 times per hour
# optional, comment out if not available, a default of 6 will be used
# consumed by: scrapers
MAX_REQUESTS_GITLAB=3

# max mentions to scrape per run, runs 10 times per hour
# optional, comment out if not available, a default of 6 will be used
# consumed by: scrapers
MAX_REQUESTS_DOI=3

# max organisations to scrape per run, runs 10 times per hour
# optional, comment out if not available, a default of 6 will be used
# consumed by: scrapers
MAX_REQUESTS_ROR=6

# Fill in any non-empty string to enable the oaipmh scraper.
# When commented it is disabled.
# consumed by: scrapers
#ENABLE_OAIPMH_SCRAPER=True

# determines if the NASSA scraper is enabled
# optional, the scraper will only run then the value is equal to true (case sensitive)
# should only be enabled by the NLeSC RSD instance
# consumed by: scrapers
# ENABLE_NASSA_SCRAPER=true

# determines if the 4TU scraper is enabled
# optional, the scraper will only run then the value is equal to true (case sensitive)
# should only be enabled by the NLeSC RSD instance
# consumed by: codemeta
# ENABLE_4TU_SCRAPER=true

# ---- SECRETS ------ SECRETS -----------

# consumed by services: database
# generate random/strong password
POSTGRES_PASSWORD=vzoIGQ4e5triUhUja6aNdvQcSazmNvDhxFT

# consumed by services: database, backend
# generate random/strong password
POSTGRES_AUTHENTICATOR_PASSWORD=vzoIGQ4e5triUhUja6aNdvQcSazmNvDhxFT

# SURFCONEXT
# consumed by services: authentication
# obtain the secret from SURFCONEXT dashboard
AUTH_SURFCONEXT_CLIENT_SECRET=vzoIGQ4e5triUhUja6aNdvQcSazmNvDhxFT

# Helmholtz ID
# consumed by services: authentication
# obtain the secret from the project team
# AUTH_HELMHOLTZID_CLIENT_SECRET=

# ORCID
# consumed by services: authentication
# obtain the secret from the project team
AUTH_ORCID_CLIENT_SECRET=vzoIGQ4e5triUhUja6aNdvQcSazmNvDhxFT

# POSTGREST JWT SECRET
# consumed by services: authentication, frontend (auth-node), auth-tests, scrapers
# generate random/strong password with at least 32 characters
PGRST_JWT_SECRET=vzoIGQ4e5triUhUja6aNdvQcSazmNvDhxFT

# consumed by: scrapers
# optional, comment out if not available, should be of the form username:token
# obtain the secret from GITHUB dashboard
API_CREDENTIALS_GITHUB=

# consumed by: scrapers
# obtain the secret from ZENODO dashboard
ZENODO_ACCESS_TOKEN=

# consumed by: scrapers, frontend api (node)
# email address that Crossref can contact you with to comply with their "polite" policy
# leave blank or use a real email address that you will respond to
CROSSREF_CONTACT_EMAIL=rsd@esciencecenter.nl

# consumed by: frontend
# URL (should end with a trailing slash) and ID for Matomo Tracking Code
MATOMO_URL=https://matomo.research.software/
MATOMO_ID=999

# consumed by: scrapers
LIBRARIES_IO_ACCESS_TOKEN=
